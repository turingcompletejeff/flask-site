services:
  flask-site:
    image: flask-site:latest
    container_name: flask-site-prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Define these in Portainer's environment variables section
      - DATABASE_TYPE=${DATABASE_TYPE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - RCON_PASS=${RCON_PASS}
      - MC_HOST=${MC_HOST}
      - MC_PORT=${MC_PORT}
      - SECRET_KEY=${SECRET_KEY}
      - REGISTRATION_ENABLED=${REGISTRATION_ENABLED}
      - MAIL_USER=${MAIL_USER}
      - MAIL_PW=${MAIL_PW}
    volumes:
      # Persistent uploads directory - using dedicated directory in /home/
      - /home/flask-site/uploads:/app/uploads
    networks:
      - flask-network
    depends_on:
      postgres:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/about"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G            # Increased for your 16GB system
          cpus: '4.0'           # Can use 4 of your 28 cores
        reservations:
          memory: 512M
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 15s
        max_attempts: 3
        window: 120s

  postgres:
    image: postgres:15-alpine
    container_name: flask-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      TZ: America/New_York
    volumes:
      # Persistent data storage
      - /home/flask-site/postgres_data:/var/lib/postgresql/data
      # Database initialization scripts
      - /home/flask-site/db-init:/docker-entrypoint-initdb.d
    networks:
      - flask-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '2.0'
        reservations:
          memory: 256M
          cpus: '0.5'

networks:
  flask-network:
    driver: bridge